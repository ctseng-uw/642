Member 1: Pei-Chieh Lo (plo7)  
Member 2: Chang-Yen Tseng (ctseng27)

# Part A:

## Recovered password

srstephenso2's password is 00316759.  
ceccio's       password is 41467847.

## Pseudocode for attack
```
user1 <- "ceccio" + ","
user2 <- "srstephenso2" + ","
salt1 <- "," + "72420522"
salt2 <- "," + "86737697"
target1 <- "0da91811c43bc8f156aea0fa963a8d6c3ef14b7a398fe0af79a406f64a8f6fa3"
target2 <- "35ed5754f749aa4138381ae746c845ca94d4c9d81bedcae90006e3b6b5c2c37a"

pswlen <- 1
flag <- [False,False]

while pswlen < 9 do
    max_ <- 10**pswlen
    for i = 0 to max_ do
        tmp <- str(i)
        tmp <- "0"*(pswlen-len(tmp)) + tmp
        total1 <- user1+tmp+salt1
        total2 <- user2+tmp+salt2

        if flag[0]==False AND target1 == hashlib.sha256(f"{total1}".encode()).hexdigest() then
            Print f"{user1}'s password is {tmp}."
            flag[0] <- True
            if flag[1] == True then
                exit()
            end if
        end if

        if flag[1]==False AND target2 == hashlib.sha256(f"{total2}".encode()).hexdigest() then
            Print f"{user2}'s password is {tmp}."
            flag[1] <- True
            if flag[0]==True then
                exit()
            end if 
        end if
    end for
    pswlen <- pswlen +1
end while
```
## Worst case running time

Because we are using brute force and try every possible combination, we will need 10^9 hashes in the worst case (per account).

## Discussion of current proposal and suggestions for improvement

The current proposal is crackable because worst-case running time is acceptable. (Although the cracking might be slow, it can work.)

To improve this system, we can add a long secret string (pepper) and hash it with username, password, and salt. (The secret will be stored in the application's code and not in database)  
To be more specific, we will put a string like f"{username},{password},{pepper},{salt}" in the hash function. Then it will be hard to crack when the size of pepper is large because it may take up to N^(len(password)+len(pepper)) hashes.  
Additionally, we can use "slower" hash function such as scrypt and argon2.  
Finally, we might want to require users to set up their passwords with uppercase and lowercase letters, numbers, and at least one special character, which will be harder to crack, too.


# Part B:

## Discussion of the current scheme
 
The current scheme is AES in CBC mode.  
AES-CBC cannot prove that the ciphertext was not modified by any attacker.   
In this case, the data we want to modify is in the first block, therefore we can change IV to tamper with the plaintext.   
To be more specific, we need to get the original IV(IV) and the original plaintext(PL), and then, we can find another IV(IV') such that IV' XOR the modified plaintext(PL') will equal to IV XOR PL. This will not affect the following message at all, which will make the modification hard to be noticed.

## Suggestions for improving the scheme

The main problem of AES-CBC is that it does not provide authentication. Therefore, it is vulnerable to chosen ciphertext attack.

We suggest combining AES-CBC with MAC (e.g. HMAC-SHA1), so the receiver can validate if the message is from the original sender before decrypting it.  
Although the original proposal also consists of a hash function, it has no authentication at all. Because the hash function is public and what the original proposal hash is the plaintext, which is the most vulnerable combination.  
So, to improve that, we can take the "Encrypt, then MAC" approach, which will be much more secure.

# Part C:

## Secret code
1cB5e5EA-ec3612ed

## Explanation
1. generate a secret key x
2. derive the public key gx
3. send gx to the server to obtain gy and the ciphertext
4. from x & gy, derive gxy
5. use gxy to decrypt the secret code

# Bonus
## Recovered password
Badger1!

## Pseudocode for attack
```
TARGET <- "80cb3696e6fe9953e61048ad0013e4e9d31e26d0b10eec5650b26625033dfbe4203f1cc793e2df9031e96a1a877cce2f5da4cc8ec0698c382438aae4591a5d1a"
USERNAME <- "bucky"
for every password in crackstation-human-only.txt do
    if password does not meet password policy then
        continue
    end if
    h <- hashlib.scrypt(password=message.encode(),
                            salt=salt.encode(),
                            n=16,
                            r=32,
                            p=1)
    message <- USERNAME + "," + password
    if h == TARGET then
        print message
    endif
end for
```