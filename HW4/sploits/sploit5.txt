This is a format string attack.

The structure is like below.

| (&eip+1) + nop*4 | (&eip+2) + nop*4 | (&eip+3) + nop*4 | %08x%08x | (%()u%n)*3 | nop sled | shellcode(45)  | nop sled |   

|                              A                         |     B    |     C      |          D                           |

The idea is to write the target address to eip by snprintf.
The target address in this sploit is used the input part's(arg) shellcode address but not the buffer's.

PART A:

In order to put the target address to right place, the first part of the string is the address of eip. We will write to each byte of $eip seperately, so the addr is the addr for each byte of $eip.
We only overwrite the most significant three bytes, so just the three bytes' address.

PART B:

By gdb, we found that in snprintf, the stack has other data on the top, which means the stack is like
|8 | 8 | &buf |...

Because we want to use buf to control the address we want to overwrite by snprintf + %n, so we will want the $esp to point to buf before every overwriting.
"%08x%08x" is to move the stack pointer to buf.(It seems like pop out the top 2 elements in stack.)

PART C:

The target address is like other buffer overflow attack, which is in the range of nop sled. 
Because %n will write the number of bytes before it, so we can use %u to let the number of bytes equal to the value we want to overwrite.

PART D:
just the ordinary buffer overflow attack, nop and shellcode.



